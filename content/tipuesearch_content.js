var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'week', 'text': '', 'tags': '', 'url': 'week.html'}, {'title': 'w1', 'text': '創 cd2020的倉儲 \n 創 網站 \xa0 \n 步驟: \n \n 登入自己得 gihub \xa0建立新的 倉儲名字叫 cd2020 \n 接著執行git clone\xa0 https://github.com/s40723111/cd2020 \xa0(自己的網址) \n 執行git submodule add\xa0 https://github.com/mdecourse/cmsimde.git \xa0取得子模組資料 \n 將cmsimde>up_dir裡的所有項目全部複製到外面cd2020裡面 \n 之後cd cmsimde 輸入python -m pip install flask_cors更改模組 \n 接著就能執行python wsgi.py編輯靜態網站 \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '將python 3.7.3更新至3.8.2 \n 1. https://www.python.org/downloads/windows/ 在這個網站上下載 \n Windows x86-64 executable installer 安裝至自己可攜系統(把pip的選項去掉)。 \n \n 2.使用批次檔更改開始路徑，使用 Scite.exe 編輯器將原本的py373更改成新的3.8.2版本的路徑 \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_mdecourse\nset HomeDrive=%Disk%:\\home_mdecourse\nset Home=%Disk%:\\home_mdecourse\nset USERPROFILE=%Disk%:\\home_mdecourse\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\py382\\DLLs;%Disk%:\\py382\\Lib;%Disk%:\\py382\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\py382\n\nset path_python=%Disk%:\\py382;%Disk%:\\py382\\Scripts;\nset path_msys2=%Disk%:\\msys64\\mingw64\\bin;\nREM coreutils is for compiling fossil scm\nset path_coreutils=%Disk%:\\coreutils-5.3.0\\bin;%Disk%:\\depends22_x64;\nset path_tcc=%Disk%:\\tcc;\nset path_cmake=%Disk%:\\cmake-3.10.1-win64-x64\\bin;\nset path_nodejs=Disk%:\\nodejs;%Disk%:\\nodejs\\appdata\\roaming\\npm;\nset path_git=%Disk%:\\portablegit\\bin;\nset path_xming=%Disk%:\\Xming;\nset path_latex=%%Disk%:\\Pandoc;%Disk%:\\TinyTeX\\bin\\win32;\n\npath=%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wscite415\\wscite\\SciTE.exe\nstart /MIN %Disk%:\\wscite415\\wscite\\SciTE.exe\n\nExit \n 3.執行get-pip.py (取得安裝管理工具) \n \n 4.執行pip install指令將 \n Flask \n Markdown \n lxml \n bs4 \n flask_cors \n pelican \n leo \n 這些3.8.2版本缺少的模組依序安裝下來。 \n \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w4', 'text': '更新至倉儲3.8.2後，launchLeo.py會無法執行 \n 解決方式: \n 1.開啟start_mdecourse.bat \n 2.進入SCiTE程式編輯器，點選Options，點選 open python.properties \n \n 4.使用ctrl+H功能，將py373取代為 python3.8.2的資料夾名稱(我的是py382) \n # Define SciTE settings for Python files.\n\nfile.patterns.py=*.py;*.pyw;*.pyx;*.pxd;*.pxi\nfile.patterns.scons=SConstruct;SConscript\n\n*source.patterns.python=$(file.patterns.py);\n\nshbang.python=py\n\nfilter.python=Python (py pyw)|$(file.patterns.py)|\n\n*filter.python=$(filter.python)\n\nlexer.$(file.patterns.py)=python\nlexer.$(file.patterns.scons)=python\n\n*language.python=Pytho&n|py||\n\nkeywordclass.python2=and as assert break class continue def del elif \\\nelse except exec finally for from global if import in is lambda not \\\nor pass print raise return try while with yield\n\nkeywordclass.python3=False None True and as assert break class continue \\\ndef del elif else except finally for from global if import in is lambda \\\nnonlocal not or pass raise return try while with yield\n\nkeywordclass.python=$(keywordclass.python2)\n\n# Extra keywords for cython\nkeywordclass.cython=cdef cimport cpdef\n\nkeywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)\nkeywords.$(file.patterns.scons)=$(keywordclass.python)\n\n# If you uncomment the 3 lines below,\n# and put some words after "keywordclass2.python=",\n# those words will be styled by style.python.14\n\n#keywordclass2.python=\n#keywords2.$(file.patterns.py)=$(keywordclass2.python)\n#keywords2.$(file.patterns.scons)=$(keywordclass2.python)\n\n# Use 2 sets of substyles to highlight standard library modules and\n# imports from the future.\n# Additional identifier sets can be added by incrementing the  next\n# line\'s value and adding extra definitions similar to below.\nsubstyles.python.11=2\n\nsubstylewords.11.1.$(file.patterns.py)=\\\n__main__ _dummy_thread _thread abc aifc argparse \\\narray ast asynchat asyncio asyncore atexit audioop \\\nbase64 bdb binascii binhex bisect builtins bz2 \\\ncalendar cgi cgitb chunk cmath cmd code codecs \\\ncodeop collections colorsys compileall concurrent \\\nconfigparser contextlib copy copyreg crypt csv \\\nctypes curses datetime dbm decimal difflib dis \\\ndistutils dummy_threading email ensurepip enum \\\nerrno faulthandler fcntl filecmp fileinput fnmatch \\\nformatter fpectl fractions ftplib functools gc getopt \\\ngetpass gettext glob grp gzip hashlib heapq hmac \\\nhtml http http imaplib imghdr importlib inspect io \\\nipaddress itertools json keyword linecache locale \\\nlogging lzma macpath mailbox mailcap marshal math \\\nmimetypes mmap modulefinder msilib msvcrt \\\nmultiprocessing netrc nis nntplib numbers operator \\\nos os ossaudiodev parser pathlib pdb pickle \\\npickletools pipes pkgutil platform plistlib poplib posix \\\npprint pty pwd py_compile pyclbr queue quopri \\\nrandom re readline reprlib resource rlcompleter runpy \\\nsched select selectors shelve shlex shutil signal site \\\nsmtpd smtplib sndhdr socket socketserver spwd \\\nsqlite3 ssl stat statistics string stringprep struct \\\nsubprocess sunau symbol symtable sys sysconfig \\\nsyslog tabnanny tarfile telnetlib tempfile termios \\\ntextwrap threading time timeit tkinter token \\\ntokenize trace traceback tracemalloc tty turtle \\\ntypes unicodedata unittest urllib uu uuid venv warnings \\\nwave weakref webbrowser winreg winsound wsgiref \\\nxdrlib xml xmlrpc zipfile zipimport zlib\nstyle.python.11.1=fore:#DD9900\n\nsubstylewords.11.2.$(file.patterns.py)=__future__ \\\nwith_statement unicode_literals print_function\nstyle.python.11.2=fore:#EE00AA,italics\n\n#~ statement.indent.$(file.patterns.py)=10 :\nstatement.indent.$(file.patterns.py)=5 class def elif else except finally \\\nfor if try while with\n\nstatement.lookback.$(file.patterns.py)=0\nblock.start.$(file.patterns.py)=\nblock.end.$(file.patterns.py)=\n\nview.indentation.examine.*.py=2\n\ntab.timmy.whinge.level=1\n\n#fold.quotes.python=1\n\ncomment.block.python=#~\n\nindent.python.colon=1\n\n# Python styles\n# White space\nstyle.python.0=fore:#808080\n# Comment\nstyle.python.1=fore:#007F00,$(font.comment)\n# Number\nstyle.python.2=fore:#007F7F\n# String\nstyle.python.3=fore:#7F007F,$(font.monospace)\n# Single quoted string\nstyle.python.4=fore:#7F007F,$(font.monospace)\n# Keyword\nstyle.python.5=fore:#00007F,bold\n# Triple quotes\nstyle.python.6=fore:#7F0000\n# Triple double quotes\nstyle.python.7=fore:#7F0000\n# Class name definition\nstyle.python.8=fore:#0000FF,bold\n# Function or method name definition\nstyle.python.9=fore:#007F7F,bold\n# Operators\nstyle.python.10=bold\n# Identifiers\nstyle.python.11=\n# Comment-blocks\nstyle.python.12=fore:#7F7F7F\n# End of line where string is not closed\nstyle.python.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled\n# Highlighted identifiers\nstyle.python.14=fore:#407090\n# Decorators\nstyle.python.15=fore:#805000\n# F-String\nstyle.python.16=fore:#7F007F,$(font.monospace)\n# Single quoted f-string\nstyle.python.17=fore:#7F007F,$(font.monospace)\n# Triple quoted f-string\nstyle.python.18=fore:#7F0000\n# Triple double quoted f-string\nstyle.python.19=fore:#7F0000\n# Matched Operators\nstyle.python.34=fore:#0000FF,bold\nstyle.python.35=fore:#FF0000,bold\n# Braces are only matched in operator style\nbraces.python.style=10\n\nif PLAT_WIN\n\tcommand.go.*.py=y:\\py382\\pythonw -u "$(FileNameExt)"\n\tcommand.go.subsystem.*.py=1\n\tcommand.go.*.pyw=y:\\pythonw -u "$(FileNameExt)"\n\tcommand.go.subsystem.*.pyw=1\n\tcommand.build.SConscript=scons.bat --up .\n\tcommand.build.SConstruct=scons.bat .\n\nif PLAT_GTK\n\tcommand.go.*.py=y:\\py382\\python -u "$(FileNameExt)"\n\tcommand.build.SConscript=scons --up .\n\tcommand.build.SConstruct=scons .\n\nif PLAT_MAC\n\tcommand.go.*.py=python -u "$(FileNameExt)"\n\tcommand.build.SConscript=scons --up .\n\tcommand.build.SConstruct=scons .\n\ncommand.name.1.$(file.patterns.py)=Syntax Check\ncommand.1.$(file.patterns.py)=python -c "import py_compile; py_compile.compile(r\'$(FilePath)\')"\n \n 5.最後將launchleo.py檔案放入SciTE編輯器就能夠順利開啟leo Editor', 'tags': '', 'url': 'w4.html'}, {'title': '直播紀錄', 'text': 'w2 \n \n', 'tags': '', 'url': '直播紀錄.html'}]};